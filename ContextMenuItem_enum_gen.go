package ux

import (
	"strings"

	
)

// Code generated by GeneratedFile enum - DO NOT EDIT.

type ContextMenuItemKind byte

const (
	CopyRowKind ContextMenuItemKind = iota
	ConvertToContainerKind
	ConvertToNonContainerKind
	NewKind
	NewContainerKind
	DeleteKind
	DuplicateKind
	EditKind
	OpenAllKind
	CloseAllKind
	InvalidContextMenuItemKind
)

func ConvertInteger2ContextMenuItemKind[T stream.Integer](v T) ContextMenuItemKind {
	return ContextMenuItemKind(v)
}

func (k ContextMenuItemKind) AssertKind(kinds string) ContextMenuItemKind {
	for _, kind := range k.Kinds() {
		if strings.ToLower(kinds) == strings.ToLower(kind.String()) {
			return kind
		}
	}
	return InvalidContextMenuItemKind
}

func (k ContextMenuItemKind) String() string {
	switch k {
	case CopyRowKind:
		return "CopyRow"
	case ConvertToContainerKind:
		return "ConvertToContainer"
	case ConvertToNonContainerKind:
		return "ConvertToNonContainer"
	case NewKind:
		return "New"
	case NewContainerKind:
		return "NewContainer"
	case DeleteKind:
		return "Delete"
	case DuplicateKind:
		return "Duplicate"
	case EditKind:
		return "Edit"
	case OpenAllKind:
		return "OpenAll"
	case CloseAllKind:
		return "CloseAll"
	default:
		return "InvalidContextMenuItemKind"
	}
}

func (k ContextMenuItemKind) Keys() []string {
	return []string{
		"CopyRow",
		"ConvertToContainer",
		"ConvertToNonContainer",
		"New",
		"NewContainer",
		"Delete",
		"Duplicate",
		"Edit",
		"OpenAll",
		"CloseAll",
	}
}

func (k ContextMenuItemKind) Kinds() []ContextMenuItemKind {
	return []ContextMenuItemKind{
		CopyRowKind,
		ConvertToContainerKind,
		ConvertToNonContainerKind,
		NewKind,
		NewContainerKind,
		DeleteKind,
		DuplicateKind,
		EditKind,
		OpenAllKind,
		CloseAllKind,
	}
}

func (k ContextMenuItemKind) PngFileName() string {
	switch k {
	case CopyRowKind:
		return "CopyRow"
	case ConvertToContainerKind:
		return "ConvertToContainer"
	case ConvertToNonContainerKind:
		return "ConvertToNonContainer"
	case NewKind:
		return "New"
	case NewContainerKind:
		return "NewContainer"
	case DeleteKind:
		return "Delete"
	case DuplicateKind:
		return "Duplicate"
	case EditKind:
		return "Edit"
	case OpenAllKind:
		return "OpenAll"
	case CloseAllKind:
		return "CloseAll"
	default:
		return "InvalidContextMenuItemKind"
	}
}
