package main

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by GeneratedFile types - DO NOT EDIT.

type AppType uint8

const (
	SuperRecovery4Type AppType = iota
	AneData6Type
	ChaoQiangZhaoPianType
	DataExploreType
	DiskGetorType
	DocxBuildType
	ExcelHuiFuZhuanJiaType
	ExcelRebuild1Type
	ExcelRebuild3Type
	ExcelScanType
	HykHfType
	Jphf3Type
	MailScanType
	OfficeBuildType
	OfficeZipBuildType
	PptxBuildType
	SuperRecovery2Type
	WordRepairerType
	WordScanType
	XlsxBuildType
	ZipBuildType
)

func (t AppType) Valid() bool {
	return t >= SuperRecovery4Type && t <= ZipBuildType
}

func AppTypeBy[T stream.Integer](v T) AppType {
	return AppType(v)
}

func (t AppType) AssertBy(name string) AppType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t AppType) String() string {
	switch t {
	case SuperRecovery4Type:
		return "SuperRecovery4"
	case AneData6Type:
		return "AneData6"
	case ChaoQiangZhaoPianType:
		return "ChaoQiangZhaoPian"
	case DataExploreType:
		return "DataExplore"
	case DiskGetorType:
		return "DiskGetor"
	case DocxBuildType:
		return "DocxBuild"
	case ExcelHuiFuZhuanJiaType:
		return "ExcelHuiFuZhuanJia"
	case ExcelRebuild1Type:
		return "ExcelRebuild1"
	case ExcelRebuild3Type:
		return "ExcelRebuild3"
	case ExcelScanType:
		return "ExcelScan"
	case HykHfType:
		return "HykHf"
	case Jphf3Type:
		return "Jphf3"
	case MailScanType:
		return "MailScan"
	case OfficeBuildType:
		return "OfficeBuild"
	case OfficeZipBuildType:
		return "OfficeZipBuild"
	case PptxBuildType:
		return "PptxBuild"
	case SuperRecovery2Type:
		return "SuperRecovery2"
	case WordRepairerType:
		return "WordRepairer"
	case WordScanType:
		return "WordScan"
	case XlsxBuildType:
		return "XlsxBuild"
	case ZipBuildType:
		return "ZipBuild"
	default:
		panic("InvalidType")
	}
}

func (t AppType) Tooltip() string {
	switch t {
	case SuperRecovery4Type:
		return "SuperRecovery4"
	case AneData6Type:
		return "AneData6"
	case ChaoQiangZhaoPianType:
		return "ChaoQiangZhaoPian"
	case DataExploreType:
		return "DataExplore"
	case DiskGetorType:
		return "DiskGetor"
	case DocxBuildType:
		return "DocxBuild"
	case ExcelHuiFuZhuanJiaType:
		return "ExcelHuiFuZhuanJia"
	case ExcelRebuild1Type:
		return "ExcelRebuild1"
	case ExcelRebuild3Type:
		return "ExcelRebuild3"
	case ExcelScanType:
		return "ExcelScan"
	case HykHfType:
		return "HykHf"
	case Jphf3Type:
		return "Jphf3"
	case MailScanType:
		return "MailScan"
	case OfficeBuildType:
		return "OfficeBuild"
	case OfficeZipBuildType:
		return "OfficeZipBuild"
	case PptxBuildType:
		return "PptxBuild"
	case SuperRecovery2Type:
		return "SuperRecovery2"
	case WordRepairerType:
		return "WordRepairer"
	case WordScanType:
		return "WordScan"
	case XlsxBuildType:
		return "XlsxBuild"
	case ZipBuildType:
		return "ZipBuild"
	default:
		panic("InvalidType")
	}
}

func (t AppType) Names() []string {
	return []string{
		"SuperRecovery4",
		"AneData6",
		"ChaoQiangZhaoPian",
		"DataExplore",
		"DiskGetor",
		"DocxBuild",
		"ExcelHuiFuZhuanJia",
		"ExcelRebuild1",
		"ExcelRebuild3",
		"ExcelScan",
		"HykHf",
		"Jphf3",
		"MailScan",
		"OfficeBuild",
		"OfficeZipBuild",
		"PptxBuild",
		"SuperRecovery2",
		"WordRepairer",
		"WordScan",
		"XlsxBuild",
		"ZipBuild",
	}
}

func (t AppType) EnumTypes() []AppType {
	return []AppType{
		SuperRecovery4Type,
		AneData6Type,
		ChaoQiangZhaoPianType,
		DataExploreType,
		DiskGetorType,
		DocxBuildType,
		ExcelHuiFuZhuanJiaType,
		ExcelRebuild1Type,
		ExcelRebuild3Type,
		ExcelScanType,
		HykHfType,
		Jphf3Type,
		MailScanType,
		OfficeBuildType,
		OfficeZipBuildType,
		PptxBuildType,
		SuperRecovery2Type,
		WordRepairerType,
		WordScanType,
		XlsxBuildType,
		ZipBuildType,
	}
}

func (t AppType) SvgFileName() string {
	return t.String() + ".svg"
}
