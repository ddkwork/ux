Subject: [PATCH] dropFile
---
Index: vendor/gioui.org/app/os_x11.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_x11.go b/vendor/gioui.org/app/os_x11.go
--- a/vendor/gioui.org/app/os_x11.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_x11.go	(date 1750734635988)
@@ -926,3 +926,9 @@
 	w.xkb.SetKeymap(unsafe.Pointer(keymap), unsafe.Pointer(state))
 	return nil
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_ios.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_ios.go b/vendor/gioui.org/app/os_ios.go
--- a/vendor/gioui.org/app/os_ios.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_ios.go	(date 1750734635985)
@@ -444,3 +444,9 @@
 func (u UIKitViewEvent) Valid() bool {
 	return u != (UIKitViewEvent{})
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_android.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_android.go b/vendor/gioui.org/app/os_android.go
--- a/vendor/gioui.org/app/os_android.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_android.go	(date 1750734635984)
@@ -1498,3 +1498,9 @@
 func (a AndroidViewEvent) Valid() bool {
 	return a != (AndroidViewEvent{})
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_darwin.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_darwin.go b/vendor/gioui.org/app/os_darwin.go
--- a/vendor/gioui.org/app/os_darwin.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_darwin.go	(date 1750734635984)
@@ -271,3 +271,9 @@
 		w.loop.FlushEvents()
 	})
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_macos.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_macos.go b/vendor/gioui.org/app/os_macos.go
--- a/vendor/gioui.org/app/os_macos.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_macos.go	(date 1750734635986)
@@ -1166,3 +1166,9 @@
 func (a AppKitViewEvent) Valid() bool {
 	return a != (AppKitViewEvent{})
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/internal/windows/windows.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/internal/windows/windows.go b/vendor/gioui.org/app/internal/windows/windows.go
--- a/vendor/gioui.org/app/internal/windows/windows.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/internal/windows/windows.go	(date 1750734491602)
@@ -177,6 +177,9 @@
 }
 
 const (
+	WM_DROPFILES      = 0x233 // 563
+	WS_EX_ACCEPTFILES = 0x00000010
+	
 	TRUE = 1
 
 	CPS_CANCEL = 0x0004
@@ -484,7 +487,52 @@
 
 	dwmapi                        = syscall.NewLazySystemDLL("dwmapi")
 	_DwmExtendFrameIntoClientArea = dwmapi.NewProc("DwmExtendFrameIntoClientArea")
+
+	shell32         = syscall.NewLazySystemDLL("shell32")
+	_DragQueryFileW = shell32.NewProc("DragQueryFileW")
+	_DragQueryPoint = shell32.NewProc("DragQueryPoint")
+	_DragFinish     = shell32.NewProc("DragFinish")
 )
+
+func DragQueryFile(hDrop HDROP, iFile uint) (fileName string, fileCount uint) {
+	ret, _, _ := _DragQueryFileW.Call(hDrop, uintptr(iFile), 0, 0)
+	fileCount = uint(ret)
+	if iFile != 0xFFFFFFFF {
+		buf := make([]uint16, fileCount+1)
+		ret, _, _ := _DragQueryFileW.Call(
+			hDrop,
+			uintptr(iFile),
+			uintptr(unsafe.Pointer(&buf[0])),
+			uintptr(fileCount+1))
+
+		if ret == 0 {
+			panic("Invoke DragQueryFile error.")
+		}
+		fileName = syscall.UTF16ToString(buf)
+	}
+	return
+}
+
+func DragQueryPoint(hDrop HDROP) (x, y int, isClientArea bool) {
+	var pt POINT
+	ret, _, _ := _DragQueryPoint.Call(
+		hDrop,
+		uintptr(unsafe.Pointer(&pt)))
+	return int(pt.X), int(pt.Y), ret == 1
+}
+
+func DragFinish(hDrop HDROP) {
+	_DragFinish.Call(hDrop)
+}
+
+type (
+	HANDLE = uintptr
+	HDROP  = HANDLE
+)
+
+type POINT struct {
+	X, Y int32
+}
 
 func AdjustWindowRectEx(r *Rect, dwStyle uint32, bMenu int, dwExStyle uint32) {
 	_AdjustWindowRectEx.Call(uintptr(unsafe.Pointer(r)), uintptr(dwStyle), uintptr(bMenu), uintptr(dwExStyle))
Index: vendor/gioui.org/app/os_js.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_js.go b/vendor/gioui.org/app/os_js.go
--- a/vendor/gioui.org/app/os_js.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_js.go	(date 1750734635985)
@@ -825,3 +825,9 @@
 func (j JSViewEvent) Valid() bool {
 	return !(j.Element.IsNull() || j.Element.IsUndefined())
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_wayland.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_wayland.go b/vendor/gioui.org/app/os_wayland.go
--- a/vendor/gioui.org/app/os_wayland.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_wayland.go	(date 1750734635987)
@@ -1937,3 +1937,9 @@
 	f := math.Float64frombits(b) - (3 << 43)
 	return float32(f)
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
Index: vendor/gioui.org/app/os_windows.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_windows.go b/vendor/gioui.org/app/os_windows.go
--- a/vendor/gioui.org/app/os_windows.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_windows.go	(date 1750735135345)
@@ -148,7 +148,8 @@
 	return nil
 }
 
-const dwExStyle = windows.WS_EX_APPWINDOW | windows.WS_EX_WINDOWEDGE
+const dwExStyle = windows.WS_EX_APPWINDOW | windows.WS_EX_WINDOWEDGE | windows.WS_EX_ACCEPTFILES
+
 
 func (w *window) init() error {
 	var resErr error
@@ -186,9 +187,16 @@
 		return err
 	}
 	w.hwnd = hwnd
+	setCaptionColor(gowindows.HWND(hwnd), 0x292929)
 	return nil
 }
 
+func setCaptionColor(handle syscall.HWND, color uint32) {
+	const DWMWA_CAPTION_COLOR = 35
+	 syscall.DwmSetWindowAttribute(handle, DWMWA_CAPTION_COLOR, unsafe.Pointer(&color), uint32(unsafe.Sizeof(color)))
+}
+
+
 // update handles changes done by the user, and updates the configuration.
 // It reads the window style and size/position and updates w.config.
 // If anything has changed it emits a ConfigEvent to notify the application.
@@ -224,6 +232,31 @@
 	w.draw(true)
 }
 
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
+type DropFilesEventData struct {
+	X, Y  int
+	Files []string
+}
+
+func genDropFilesEventArg(hDrop uintptr) DropFilesEventData {
+	var data DropFilesEventData
+	_, fileCount := windows.DragQueryFile(hDrop, 0xFFFFFFFF)
+	data.Files = make([]string, fileCount)
+
+	var i uint
+	for i = 0; i < fileCount; i++ {
+		data.Files[i], _ = windows.DragQueryFile(hDrop, i)
+	}
+
+	data.X, data.Y, _ = windows.DragQueryPoint(hDrop)
+	windows.DragFinish(hDrop)
+	return data
+}
+
 func windowProc(hwnd syscall.Handle, msg uint32, wParam, lParam uintptr) uintptr {
 	win, exists := winMap.Load(hwnd)
 	if !exists {
@@ -233,6 +266,8 @@
 	w := win.(*window)
 
 	switch msg {
+	case windows.WM_DROPFILES:
+		dragHandler(genDropFilesEventArg(wParam).Files)
 	case windows.WM_UNICHAR:
 		if wParam == windows.UNICODE_NOCHAR {
 			// Tell the system that we accept WM_UNICHAR messages.
Index: vendor/gioui.org/app/os_unix.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/gioui.org/app/os_unix.go b/vendor/gioui.org/app/os_unix.go
--- a/vendor/gioui.org/app/os_unix.go	(revision abd7abd1145be0cd514828e30ca2625110aaa3f0)
+++ b/vendor/gioui.org/app/os_unix.go	(date 1750734635986)
@@ -97,3 +97,9 @@
 	pointer.CursorNorthEastSouthWestResize: "fd_double_arrow",
 	pointer.CursorNorthWestSouthEastResize: "bd_double_arrow",
 }
+
+var dragHandler = func(files []string) {}
+
+func FileDropCallback(fn func(files []string)) {
+	dragHandler = fn
+}
diff --git a/internal/patch/patch.tar b/internal/patch/patch.tar
deleted file mode 100644
index b6a1ebda5d3a75afd6d3163e1cfa389ea4d473e1..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

