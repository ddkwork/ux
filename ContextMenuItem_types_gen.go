package ux

import (
	"strings"

	"github.com/ddkwork/golibrary/stream"
)

// Code generated by EnumTypesGen - DO NOT EDIT.

type ContextMenuItemType uint8

const (
	CopyRowType ContextMenuItemType = iota
	ConvertToContainerType
	ConvertToNonContainerType
	NewType
	NewContainerType
	DeleteType
	DuplicateType
	EditType
	OpenAllType
	CloseAllType
	SaveDataType
)

func (t ContextMenuItemType) Valid() bool {
	return t >= CopyRowType && t <= SaveDataType
}

func ContextMenuItemTypeBy[T stream.Integer](v T) ContextMenuItemType {
	return ContextMenuItemType(v)
}

func (t ContextMenuItemType) AssertBy(name string) ContextMenuItemType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.ToLower(name) == strings.ToLower(n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t ContextMenuItemType) String() string {
	switch t {
	case CopyRowType:
		return "CopyRow"
	case ConvertToContainerType:
		return "ConvertToContainer"
	case ConvertToNonContainerType:
		return "ConvertToNonContainer"
	case NewType:
		return "New"
	case NewContainerType:
		return "NewContainer"
	case DeleteType:
		return "Delete"
	case DuplicateType:
		return "Duplicate"
	case EditType:
		return "Edit"
	case OpenAllType:
		return "OpenAll"
	case CloseAllType:
		return "CloseAll"
	case SaveDataType:
		return "SaveData"
	default:
		panic("InvalidType")
	}
}

func (t ContextMenuItemType) Tooltip() string {
	switch t {
	case CopyRowType:
		return "CopyRow"
	case ConvertToContainerType:
		return "ConvertToContainer"
	case ConvertToNonContainerType:
		return "ConvertToNonContainer"
	case NewType:
		return "New"
	case NewContainerType:
		return "NewContainer"
	case DeleteType:
		return "Delete"
	case DuplicateType:
		return "Duplicate"
	case EditType:
		return "Edit"
	case OpenAllType:
		return "OpenAll"
	case CloseAllType:
		return "CloseAll"
	case SaveDataType:
		return "SaveData"
	default:
		panic("InvalidType")
	}
}

func (t ContextMenuItemType) Names() []string {
	return []string{
		"CopyRow",
		"ConvertToContainer",
		"ConvertToNonContainer",
		"New",
		"NewContainer",
		"Delete",
		"Duplicate",
		"Edit",
		"OpenAll",
		"CloseAll",
		"SaveData",
	}
}

func (t ContextMenuItemType) EnumTypes() []ContextMenuItemType {
	return []ContextMenuItemType{
		CopyRowType,
		ConvertToContainerType,
		ConvertToNonContainerType,
		NewType,
		NewContainerType,
		DeleteType,
		DuplicateType,
		EditType,
		OpenAllType,
		CloseAllType,
		SaveDataType,
	}
}

func (t ContextMenuItemType) SvgFileName() string {
	return t.String() + ".svg"
}
