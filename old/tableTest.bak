	//type BasicFan struct {
			//	ID          int     `json:"id"`          // id
			//	CompanyID   int     `json:"companyId"`   // 公司id
			//	CompanyName string  `json:"companyName"` // 公司名称
			//	PlantID     int     `json:"plantId"`     // 场站id
			//	PlantName   string  `json:"plantName"`   // 场站名称
			//	StagingID   int     `json:"stagingId"`   // 工期id
			//	StagingName string  `json:"stagingName"` // 工期名称
			//	CircuitID   int     `json:"circuitId"`   // 集电线id
			//	CircuitName string  `json:"circuitName"` // 集电线名称
			//	FanName     string  `json:"fanName"`     // 风机名称
			//	PowerField  string  `json:"powerField"`  // 电量计算的原始点
			//	FanCode     string  `json:"fanCode"`     // 风机编码
			//	InnerCode   string  `json:"innerCode"`   // 内部编码
			//	ModelID     int     `json:"modelId"`     // 型号id
			//	ModelName   string  `json:"modelName"`   // 型号名称
			//	Status      int     `json:"status"`      // 1 运行 2 调试 3 未接入
			//	StartSpeed  float64 `json:"startSpeed"`  // 切入风速(m/s)
			//	StopSpeed   float64 `json:"stopSpeed"`   // 切出风速(m/s)
			//	FanCap      float64 `json:"fanCap"`      // 装机容量
			//	// Host        string  `json:"host"`
			//
			//	IsParadigm   int    `json:"isParadigm"`   // 是否是标杆
			//	FanLocalType string `json:"fanLocalType"` // fan_local_type 海风陆风
			//}
			//var fans []*BasicFan
			//for i := range 100 * 10000 {
			//	fans = append(fans, &BasicFan{ID: i + 1, CompanyID: 1, CompanyName: "company1", PlantName: "plant1", StagingName: "staging1", CircuitName: "circuit1", FanName: "#1风机"})
			//}
			//datatable := old.NewDataTable(fans, nil, nil)
			//table := old.NewTable(datatable)
			//table.SelectionChangedCallback = func(gtx layout.Context, row, col int) {
			//	data := table.GetRow(row)
			//	mylog.Struct(data) // todo check data
			//}
			//
			//table.DoubleClickCallback = func(gtx layout.Context, row, col int) {
			//	// data := table.GetRow(row)
			//	// mylog.Struct("todo",data)
			//	mylog.Info("double click for edit row data")
			//}
			//
			//contextMenu := ux.NewContextMenu(len(fans), nil)
			//contextMenu.AddItem(ux.ContextMenuItem{
			//	Title: "addRow",
			//	// Icon:  ux.IconAdd,//todo
			//	Can: func() bool {
			//		return true
			//	},
			//	Do: func() {
			//		mylog.Info("add row")
			//	},
			//	AppendDivider: false,
			//	Clickable:     widget.Clickable{},
			//})
			//contextMenu.AddItem(ux.ContextMenuItem{
			//	Title: "deleteRow",
			//	// Icon:  ux.IconDelete,//todo
			//	Can: func() bool {
			//		return true
			//	},
			//	Do: func() {
			//		mylog.Info("delete row")
			//	},
			//	AppendDivider: true,
			//	Clickable:     widget.Clickable{},
			//})
			//
			//table.SetMenu(contextMenu)

			//header := ux.NewContainer(w)
			//button2 := ux.NewButton(w, "滚动到第100行", func() {
			//	//table.GridState.Vertical.Last
			//	log.Println(table.Vertical.First, table.VScrollbar.ScrollDistance(), table.Vertical.OffsetAbs, table.Vertical.Length)
			//	table.Vertical.First = 0
			//	table.Vertical.Offset = (table.Vertical.Length / (table.Size())) * (100 - 1)
			//})
			//header.Add(layout.Rigid(button2.Layout))
			//header.Add(layout.Rigid(button2.Layout))
			//header.Add(layout.Rigid(button2.Layout))
			//m.Set(TableType, table)